{"version":3,"sources":["scripts/helpers/createCleanBoard.js","scripts/helpers/addNewTile.js","scripts/helpers/beforeAfterMove.js","scripts/helpers/checkLose.js","scripts/helpers/moveCell.js","scripts/helpers/makeMoveBy.js","scripts/helpers/moves.js","scripts/helpers/touchHelpers.js","scripts/main.js"],"names":["createCleanBoard","matrix","r","rows","push","c","cols","createTile","digit","row","col","classList","add","innerText","createNewTile","Math","random","emptyCells","addNewTile","letVariables","board","floor","includes","resetBeforeMove","moves","dontAddCells","map","cell","remove","afterMove","document","querySelectorAll","checkLose","some","tr","posibleMove","i","length","style","opacity","moveCell","constant","startIndex","endIndex","byRow","addtiton","startCell","trs","endCell","sum","Number","score","makeMoveBy","firstLoopParamIsRow","secondLoopIsIncrease","quantityRows","quantityCols","console","log","moveLeft","moveRight","moveDown","moveUp","xDown","yDown","getTouches","event","touches","originalEvent","handleTouchStart","firstTouch","clientX","clientY","handleTouchMove","xUp","yUp","xDiff","yDiff","abs","button","querySelector","messageLose","messageWin","messageStart","table","trsTbody","children","addEventsKeyboard","addEventListener","code","forEach","innerHTML","td","removeAttribute"],"mappings":"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","file":"main.22820d81.js","sourceRoot":"..\\src","sourcesContent":["\nimport { cols, rows } from '../main';\n\nexport const createCleanBoard = () => {\n  const matrix = [];\n\n  for (let r = 0; r < rows; r++) {\n    matrix.push([]);\n\n    for (let c = 0; c < cols; c++) {\n      matrix[r].push(0);\n    }\n  }\n\n  return matrix;\n};\n","\nimport { letVariables, rows, board, cols, trs } from '../main';\n\nconst createTile = (digit, row, col) => {\n  trs[row][col].classList.add(`field-cell--${digit}`);\n  trs[row][col].innerText = `${digit}`;\n  board[row][col] = `${digit}`;\n};\n\nconst createNewTile = (row, col) => {\n  const digit = (Math.random() < 0.1) ? 4 : 2;\n\n  letVariables.emptyCells--;\n  createTile(digit, row, col);\n};\n\nexport const addNewTile = () => {\n  while (letVariables.emptyCells >= 1) {\n    const row = Math.floor(Math.random() * rows);\n\n    while (board[row].includes(0)) {\n      const col = Math.floor(Math.random() * cols);\n\n      if (board[row][col] === 0) {\n        return createNewTile(row, col);\n      }\n    }\n\n    continue;\n  }\n};\n","\nimport { letVariables } from '../main';\nimport { addNewTile } from '../helpers/addNewTile';\n\nexport const resetBeforeMove = () => {\n  letVariables.moves = 0;\n  letVariables.dontAddCells.map(cell => cell.classList.remove('notAdd'));\n};\n\nexport const afterMove = () => {\n  if (letVariables.moves > 0) {\n    addNewTile();\n    letVariables.dontAddCells = [...document.querySelectorAll('.notAdd')];\n  }\n};\n","\nimport { board, table, messageStart, messageLose } from '../main';\n\nexport const checkLose = () => {\n  if (!board.some(tr => tr.includes(0))) {\n    const posibleMove = board.some(tr => {\n      for (let i = 1; i < tr.length; i++) {\n        if (tr[i] === tr[i - 1]) {\n          return true;\n        }\n      }\n    });\n\n    if (posibleMove) {\n      return;\n    }\n\n    for (let col = 0; col < board[0].length; col++) {\n      for (let row = 1; row < board.length; row++) {\n        if (board[row][col] === board[row - 1][col]) {\n          return;\n        }\n      }\n    }\n\n    table.style.opacity = 0.5;\n    messageStart.classList.add('hidden');\n    messageLose.classList.remove('hidden');\n  }\n};\n","\nimport {\n  trs, board, letVariables, score, messageStart, messageWin,\n} from '../main';\n\nexport const moveCell = (constant, startIndex, endIndex, byRow, addtiton) => {\n  const startCell = (byRow)\n    ? trs[constant][startIndex]\n    : trs[startIndex][constant];\n  const endCell = (byRow)\n    ? trs[constant][endIndex]\n    : trs[endIndex][constant];\n\n  const digit = startCell.innerText;\n  const sum = '' + (Number(digit) * 2);\n\n  if (byRow) {\n    board[constant][startIndex] = 0;\n    board[constant][endIndex] = (addtiton) ? sum : digit;\n  } else {\n    board[startIndex][constant] = 0;\n    board[endIndex][constant] = (addtiton) ? sum : digit;\n  }\n\n  if (addtiton) {\n    endCell.classList.remove(`field-cell--${digit}`);\n    endCell.classList.add(`notAdd`);\n    letVariables.emptyCells++;\n    score.innerText = Number(score.innerText) + Number(sum);\n  }\n\n  endCell.classList.add(`field-cell--${(addtiton) ? sum : digit}`);\n  endCell.innerText = `${(addtiton) ? sum : digit}`;\n\n  startCell.classList.remove(`field-cell--${digit}`);\n  startCell.innerText = '';\n\n  letVariables.moves++;\n\n  if (endCell.innerText === '2048') {\n    messageStart.classList.add('hidden');\n    messageWin.classList.remove('hidden');\n  }\n};\n","import { moveCell } from './moveCell';\nimport { quantityRows, quantityCols, board, trs } from '../main';\n\nexport const makeMoveBy = (\n  firstLoopParamIsRow, secondLoopIsIncrease,\n) => {\n  switch (true) {\n    case (firstLoopParamIsRow && secondLoopIsIncrease): {\n      for (let r = 0; r <= quantityRows; r++) {\n        for (let c = 0; c <= quantityCols; c++) {\n          if (board[r][c] !== 0 && c !== 0) {\n            for (let i = c - 1; i >= 0; i--) {\n              if (trs[r][i].innerText !== '') {\n                if (trs[r][i].innerText === trs[r][c].innerText\n                  && !trs[r][i].classList['notAdd']) {\n                  moveCell(r, c, i, true, true);\n                  break;\n                }\n\n                if (c !== i + 1) {\n                  moveCell(r, c, i + 1, true, false);\n                }\n                break;\n              } else if (i === 0) {\n                moveCell(r, c, i, true, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case (firstLoopParamIsRow && !secondLoopIsIncrease): {\n      for (let r = 0; r <= quantityRows; r++) {\n        for (let c = quantityCols; c >= 0; c--) {\n          if (board[r][c] !== 0 && c !== quantityCols) {\n            for (let i = c + 1; i <= quantityCols; i++) {\n              if (trs[r][i].innerText !== '') {\n                if (trs[r][i].innerText === trs[r][c].innerText\n                  && !trs[r][i].classList['notAdd']) {\n                  moveCell(r, c, i, true, true);\n                  break;\n                }\n\n                if (c !== i - 1) {\n                  moveCell(r, c, i - 1, true, false);\n                }\n                break;\n              } else if (i === quantityCols) {\n                moveCell(r, c, i, true, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case (!firstLoopParamIsRow && secondLoopIsIncrease): {\n      for (let c = 0; c <= quantityCols; c++) {\n        for (let r = 0; r <= quantityRows; r++) {\n          if (board[r][c] !== 0 && r !== 0) {\n            for (let i = r - 1; i >= 0; i--) {\n              if (trs[i][c].innerText !== '') {\n                if (trs[i][c].innerText === trs[r][c].innerText\n                  && !trs[i][c].classList['notAdd']) {\n                  moveCell(c, r, i, false, true);\n                  break;\n                }\n\n                if (r !== i + 1) {\n                  moveCell(c, r, i + 1, false, false);\n                }\n                break;\n              } else if (i === 0) {\n                moveCell(c, r, i, false, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case (!firstLoopParamIsRow && !secondLoopIsIncrease): {\n      for (let c = 0; c <= quantityCols; c++) {\n        for (let r = quantityRows; r >= 0; r--) {\n          if (board[r][c] !== 0 && r !== quantityRows) {\n            for (let i = r + 1; i <= quantityRows; i++) {\n              if (trs[i][c].innerText !== '') {\n                if (trs[i][c].innerText === trs[r][c].innerText\n                  && !trs[i][c].classList['notAdd']) {\n                  moveCell(c, r, i, false, true);\n                  break;\n                }\n\n                if (r !== i - 1) {\n                  moveCell(c, r, i - 1, false, false);\n                }\n                break;\n              } else if (i === quantityRows) {\n                moveCell(c, r, i, false, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    default:\n      console.log('Some problem with counting...');\n  }\n};\n","import { afterMove, resetBeforeMove } from \"./beforeAfterMove\";\nimport { checkLose } from \"./checkLose\";\nimport { makeMoveBy } from \"./makeMoveBy\";\n\nexport function moveLeft() {\n  resetBeforeMove();\n  makeMoveBy(true, true);\n  afterMove();\n  checkLose();\n};\n\nexport function moveRight() {\n  resetBeforeMove();\n  makeMoveBy(true, false);\n  afterMove();\n  checkLose();\n};\n\nexport function moveDown() {\n  resetBeforeMove();\n  makeMoveBy(false, false);\n  afterMove();\n  checkLose();\n};\n\nexport function moveUp() {\n  resetBeforeMove();\n  makeMoveBy(false, true);\n  afterMove();\n  checkLose();\n};\n","import { moveDown, moveLeft, moveRight, moveUp } from \"./moves\";\n\nlet xDown = null;\nlet yDown = null;\n\nfunction getTouches(event) {\n  return event.touches ||         // browser API\n    event.originalEvent.touches;  // jQuery\n}\n\nexport function handleTouchStart(event) {\n  const firstTouch = getTouches(event)[0];\n\n  xDown = firstTouch.clientX;\n  yDown = firstTouch.clientY;\n};\n\nexport function handleTouchMove(event) {\n  if (!xDown || !yDown) {\n    return;\n  }\n\n  let xUp = event.touches[0].clientX;\n  let yUp = event.touches[0].clientY;\n\n  let xDiff = xDown - xUp;\n  let yDiff = yDown - yUp;\n\n  if (Math.abs(xDiff) > Math.abs(yDiff)) {\n    if (xDiff > 0) {\n      moveRight();\n    } else {\n      moveLeft();\n    }\n  } else {\n    if (yDiff > 0) {\n      moveDown();\n    } else {\n      moveUp();\n    }\n  }\n\n  xDown = null;\n  yDown = null;\n};\n","import { createCleanBoard } from './helpers/createCleanBoard';\nimport { addNewTile } from './helpers/addNewTile';\nimport { moveDown, moveLeft, moveRight, moveUp } from './helpers/moves';\nimport { handleTouchMove, handleTouchStart } from './helpers/touchHelpers';\n\nexport const rows = 4;\nexport const cols = 4;\n\nexport const quantityRows = rows - 1;\nexport const quantityCols = cols - 1;\nexport let board = createCleanBoard();\nexport const letVariables = {\n  emptyCells: rows * cols,\n  moves: 1,\n  dontAddCells: [],\n};\n\nconst button = document.querySelector('.button');\n\nexport const score = document.querySelector('.game-score');\nexport const messageLose = document.querySelector('.message-lose');\nexport const messageWin = document.querySelector('.message-win');\nexport const messageStart = document.querySelector('.message-start');\nexport const table = document.querySelector('.game-field');\n\nexport const trs = [];\n\nconst trsTbody = [...document.querySelector('tbody').children];\n\ntrsTbody.forEach(tr => {\n  trs.push([...tr.children]);\n});\n\nbutton.addEventListener('click', () => {\n  if (button.innerText === 'Restart') {\n    letVariables.moves = 1;\n    letVariables.emptyCells = rows * cols;\n    score.innerHTML = 0;\n    table.style.opacity = 1;\n\n    trs.map(tr => tr.map(td => {\n      td.removeAttribute('class');\n      td.innerText = '';\n      td.classList.add('field-cell');\n    }));\n\n    board = createCleanBoard();\n    addNewTile();\n    addNewTile();\n  }\n\n  if (button.innerText === 'Start') {\n    addNewTile();\n    addNewTile();\n    button.innerText = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n    messageStart.innerText = 'Press \"Restart\" to new game';\n    addEventsKeyboard();\n  }\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.remove('hidden');\n});\n\nfunction addEventsKeyboard() {\n  document.addEventListener('keyup', event => {\n    if (event.code === 'ArrowLeft') {\n      moveLeft();\n    }\n\n    if (event.code === 'ArrowRight') {\n      moveRight();\n    }\n\n    if (event.code === 'ArrowDown') {\n      moveDown();\n    }\n\n    if (event.code === 'ArrowUp') {\n      moveUp();\n    }\n  });\n\n  document.addEventListener('touchstart', handleTouchStart, false);\n  document.addEventListener('touchmove', handleTouchMove, false);\n}\n"]}